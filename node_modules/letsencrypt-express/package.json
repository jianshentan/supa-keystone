{
  "_args": [
    [
      {
        "raw": "letsencrypt-express@https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
        "scope": null,
        "escapedName": "letsencrypt-express",
        "name": "letsencrypt-express",
        "rawSpec": "https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
        "spec": "https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
        "type": "remote"
      },
      "/home/ubuntu/workspace"
    ]
  ],
  "_from": "letsencrypt-express@2.0.2",
  "_id": "letsencrypt-express@2.0.2",
  "_inCache": true,
  "_location": "/letsencrypt-express",
  "_phantomChildren": {},
  "_requested": {
    "raw": "letsencrypt-express@https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
    "scope": null,
    "escapedName": "letsencrypt-express",
    "name": "letsencrypt-express",
    "rawSpec": "https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
    "spec": "https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
  "_shasum": "482c6ce9e3d8ec4dc7c4167b7152bc68039a33b4",
  "_shrinkwrap": null,
  "_spec": "letsencrypt-express@https://registry.npmjs.org/letsencrypt-express/-/letsencrypt-express-2.0.2.tgz",
  "_where": "/home/ubuntu/workspace",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "bugs": {
    "url": "https://github.com/Daplie/letsencrypt-cluster/issues"
  },
  "dependencies": {
    "le-challenge-fs": "^2.0.4",
    "le-sni-auto": "^2.0.1",
    "le-store-certbot": "^2.0.3",
    "letsencrypt": "^2.1.0",
    "localhost.daplie.com-certificates": "^1.2.3",
    "redirect-https": "^1.1.0"
  },
  "description": "Free SSL and managed or automatic HTTPS for node.js with Express, Koa, Connect, Hapi, and all other middleware systems.",
  "devDependencies": {},
  "directories": {
    "example": "examples"
  },
  "homepage": "https://github.com/Daplie/letsencrypt-cluster#readme",
  "keywords": [
    "cluster",
    "multi-core",
    "cloud",
    "scale",
    "free",
    "ssl",
    "https",
    "tls",
    "letsencrypt",
    "node",
    "node.js"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "lex.js",
  "name": "letsencrypt-express",
  "optionalDependencies": {},
  "readme": "[![Join the chat at https://gitter.im/Daplie/letsencrypt-express](https://badges.gitter.im/Daplie/letsencrypt-express.svg)](https://gitter.im/Daplie/letsencrypt-express?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n| [letsencrypt (library)](https://github.com/Daplie/node-letsencrypt)\n| [letsencrypt-cli](https://github.com/Daplie/letsencrypt-cli)\n| **letsencrypt-express**\n| [letsencrypt-cluster](https://github.com/Daplie/letsencrypt-cluster)\n| [letsencrypt-koa](https://github.com/Daplie/letsencrypt-koa)\n| [letsencrypt-hapi](https://github.com/Daplie/letsencrypt-hapi)\n|\n\nletsencrypt-express\n===================\n\nFree SSL and managed or automatic HTTPS for node.js with Express, Koa, Connect, Hapi, and all other middleware systems.\n\n* Automatic Registration via SNI (`httpsOptions.SNICallback`)\n  * **registrations** require an **approval callback** in *production*\n* Automatic Renewal (around 80 days)\n  * **renewals** are *fully automatic* and happen in the *background*, with **no downtime**\n* Automatic vhost / virtual hosting\n\nAll you have to do is start the webserver and then visit it at it's domain name.\n\nHelp Wanted\n-----------\n\nThere are a number of easy-to-complete features that are up for grabs.\n\n(mostly requiring either tracing some functions and doing some console.log-ing\nor simply updating docs and getting tests to pass so that certain plugins accept\nand return the right type of objects to complete the implementation\nof certain plugins).\n\nIf you've got some free cycles to help, I can guide you through the process,\nI'm just still too busy to do it all myself right now and nothing is breaking.\n\nEmail me <aj@daplie.com> if you want to help.\n\nInstall\n=======\n\n```bash\nnpm install --save letsencrypt-express@2.x\n```\n\nQuickStart\n==========\n\nHere's a completely working example that will get you started:\n\n`app.js`:\n```javascript\n'use strict';\n\nrequire('letsencrypt-express').create({\n\n  server: 'staging'\n\n, email: 'john.doe@example.com'\n\n, agreeTos: true\n\n, approvedDomains: [ 'example.com' ]\n\n, app: require('express')().use('/', function (req, res) {\n    res.end('Hello, World!');\n  })\n\n}).listen(80, 443);\n```\n\nCertificates will be stored in `~/letsencrypt`.\n\n**Important**:\n\nYou must set `server` to `https://acme-v01.api.letsencrypt.org/directory` **after**\nyou have tested that your setup works.\n\n**Security Warning**:\n\nIf you don't do proper checks in `approveDomains(opts, certs, cb)`\nan attacker will spoof SNI packets with bad hostnames and that will\ncause you to be rate-limited and or blocked from the ACME server.\n\nWhy You Must Use 'staging' First\n--------------------------------\n\nThere are a number of common problems related to system configuration -\nfirewalls, ports, permissions, etc - that you are likely to run up against\nwhen using letsencrypt for your first time.\n\nIn order to avoid being blocked by hitting rate limits with bad requests,\nyou should always test against the `'staging'` server\n(`https://acme-staging.api.letsencrypt.org/directory`) first.\n\nUsage\n=====\n\nThe oversimplified example was the bait\n(because everyone seems to want an example that fits in 3 lines, even if it's terribly bad practices),\nnow here's the switch:\n\n`serve.js`:\n```javascript\n'use strict';\n\n// returns an instance of node-letsencrypt with additional helper methods\nvar lex = require('letsencrypt-express').create({\n  // set to https://acme-v01.api.letsencrypt.org/directory in production\n  server: 'staging'\n\n// If you wish to replace the default plugins, you may do so here\n//\n//, challenges: { 'http-01:' require('le-challenge-fs').create({}) }\n//, store: require('le-store-certbot').create({})\n//, sni: require('le-sni-auto').create({})\n\n, approveDomains: function (opts, certs, cb) {\n    // This is where you check your database and associated\n    // email addresses with domains and agreements and such\n\n\n    // The domains being approved for the first time are listed in opts.domains\n    // Certs being renewed are listed in certs.altnames\n    if (certs) {\n      opts.domains = certs.altnames;\n    }\n    else {\n      opts.email = 'john.doe@example.com';\n      opts.agreeTos = true;\n    }\n\n    cb(null, { options: opts, certs: certs });\n  }\n});\n\n\n\n// handles acme-challenge and redirects to https\nrequire('http').createServer(le.middleware()).listen(80, function () {\n  console.log(\"Listening for ACME http-01 challenges on\", this.address());\n});\n\n\n\nvar app = require('express')();\napp.use('/', function (req, res) {\n  res.end('Hello, World!');\n});\n\n// handles your app\nrequire('https').createServer(le.httpsOptions, le.middleware(app)).listen(443, function () {\n  console.log(\"Listening for ACME tls-sni-01 challenges and serve app on\", this.address());\n});\n```\n\nAPI\n===\n\nThis module is an elaborate ruse (to provide an oversimplified example and to nab some SEO).\n\nThe API is actually located at [node-letsencrypt options](https://github.com/Daplie/node-letsencrypt)\n(because all options are simply passed through to `node-letsencrypt` proper without modification).\n\nThe only \"API\" consists of two options, the rest is just a wrapper around `node-letsencrypt` to take LOC from 15 to 5:\n\n* `opts.app` An express app in the format `function (req, res) { ... }` (no `next`).\n* `lex.listen(plainPort, tlsPort)` Accepts port numbers (or arrays of port numbers) to listen on.\n\nBrief overview of some simple options for `node-letsencrypt`:\n\n* `opts.server` set to https://acme-v01.api.letsencrypt.org/directory in production\n* `opts.email` The default email to use to accept agreements.\n* `opts.agreeTos` When set to `true`, this always accepts the LetsEncrypt TOS. When a string it checks the agreement url first.\n* `opts.approvedDomains` An explicit array of The allowed domains (can be used instead of `approveDomains`).\n* `opts.approveDomains` A callback for checking your database before allowing a domain `function (opts, certs, cb) { }`\n* `opts.renewWithin` is the **maximum** number of days (in ms) before expiration to renew a certificate.\n* `opts.renewBy` is the **minimum** number of days (in ms) before expiration to renew a certificate.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/letsencrypt-cluster.git"
  },
  "scripts": {
    "test": "node examples/serve.js"
  },
  "version": "2.0.2"
}
