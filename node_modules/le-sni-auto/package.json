{
  "_args": [
    [
      {
        "raw": "le-sni-auto@https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
        "scope": null,
        "escapedName": "le-sni-auto",
        "name": "le-sni-auto",
        "rawSpec": "https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
        "spec": "https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
        "type": "remote"
      },
      "/home/ubuntu/workspace"
    ]
  ],
  "_from": "le-sni-auto@>=2.0.1 <3.0.0",
  "_id": "le-sni-auto@2.1.0",
  "_inCache": true,
  "_location": "/le-sni-auto",
  "_phantomChildren": {},
  "_requested": {
    "raw": "le-sni-auto@https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
    "scope": null,
    "escapedName": "le-sni-auto",
    "name": "le-sni-auto",
    "rawSpec": "https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
    "spec": "https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/letsencrypt",
    "/letsencrypt-express"
  ],
  "_resolved": "https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
  "_shasum": "a58adbf92e0ac5f9652192961d8668861e633d46",
  "_shrinkwrap": null,
  "_spec": "le-sni-auto@https://registry.npmjs.org/le-sni-auto/-/le-sni-auto-2.1.0.tgz",
  "_where": "/home/ubuntu/workspace",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "bugs": {
    "url": "https://github.com/Daplie/le-sni-auto/issues"
  },
  "dependencies": {
    "bluebird": "^3.4.1"
  },
  "description": "An auto-sni strategy for registering and renewing letsencrypt certificates using SNICallback",
  "devDependencies": {},
  "homepage": "https://github.com/Daplie/le-sni-auto#readme",
  "keywords": [
    "le-sni",
    "le-sni-",
    "auto-sni",
    "sni-auto",
    "SNICallback",
    "letsencrypt",
    "certbot"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "index.js",
  "name": "le-sni-auto",
  "optionalDependencies": {},
  "readme": "le-sni-auto\n===========\n\nAn auto-sni strategy for registering and renewing letsencrypt certificates using SNICallback.\n\nThis does a couple of rather simple things:\n\n  * caches certificates in memory\n  * calls `getCertificatesAsync(domain, null)` when a certificate is not in memory\n  * calls `getCertificatesASync(domain, certs)` when a certificate is up for renewal or expired\n\nInstall\n=======\n\n```bash\nnpm install --save le-sni-auto@2.x\n```\n\nUsage\n=====\n\nWith node-letsencrypt\n---------------------\n\n```javascript\n'use strict';\n\n\n\nvar leSni = require('le-sni-auto').create({\n\n  renewWithin: 10 * 24 * 60 * 60 1000       // do not renew more than 10 days before expiration\n, renewBy: 5 * 24 * 60 * 60 1000         // do not wait more than 5 days before expiration\n\n, tlsOptions: {\n    rejectUnauthorized: true              // These options will be used with tls.createSecureContext()\n  , requestCert: false                    // in addition to key (privkey.pem) and cert (cert.pem + chain.pem),\n  , ca: null                              // which are provided by letsencrypt\n  , crl: null\n  }\n\n});\n\n\n\nvar le = require('letsencrypt').create({\n  server: 'staging'\n\n, sni: leSni\n\n, approveDomains: function (domain, cb) {\n    // here you would lookup details such as email address in your db\n    cb(null, { email: 'john.doe@gmail.com.', domains: [domain, 'www.' + domain], agreeTos: true }}\n  }\n});\n\n\n\nvar redirectHttps = require('redirect-https').create();\nhttp.createServer(le.middleware(redirectHttps));\n\n\n\nvar app = require('express')();\nhttps.createServer(le.httpsOptions, le.middleware(app)).listen(443);\n```\n\nYou can also provide a thunk-style `getCertificates(domain, certs, cb)`.\n\nStandalone\n----------\n\n```javascript\n'use strict';\n\n\n\nvar leSni = require('le-sni-auto').create({\n  renewWithin: 10 * 24 * 60 * 60 1000       // do not renew prior to 10 days before expiration\n, renewBy: 5 * 24 * 60 * 60 1000         // do not wait more than 5 days before expiration\n\n  // key (privkey.pem) and cert (cert.pem + chain.pem) will be provided by letsencrypt\n, tlsOptions: { rejectUnauthorized: true, requestCert: false, ca: null, crl: null }\n\n, getCertificatesAsync: function (domain, certs) {\n    // return a promise with an object with the following keys:\n    // { privkey, cert, chain, expiresAt, issuedAt, subject, altnames }\n  }\n});\n\n\n\n// some default certificates that work with localhost\n// (because default certificates are required as a fallback)\nvar httpsOptions = require('localhost.daplie.com-certificates').merge({\n  SNICallback: leSni.sniCallback\n});\n\nhttps.createServer(httpsOptions, app);\n```\n\nYou can also provide a thunk-style `getCertificates(domain, certs, cb)`.\n\nAPI\n===\n\n* create(options)\n  * `getCertificates(domain, certs, cb)` or `getCertificatesAsync(domain, certs)`\n  * `renewWithin` (default 7 days, min 3 days)\n  * `renewBy` (default 2 days, min 12 hours)\n* `sniCallback(domain, cb)`\n* `cacheCerts(certs)`\n* `uncacheDomain(domain)`\n\n.renewWithin\n-----------\n\nSpecifies the maximum amount of time (in ms) before\nthe certificate expires to renew it.\n\nSay the cert expires in 90 days and you would like\nto renew, **at earliest** 10 days before it expires.\n\nYou would set this to `10 * 24 * 60 * 60 * 1000`.\n\n.renewBy\n--------\n\nSpecifies the maximum amount of time (in ms) before\nthe certificate expires to renew it.\n\nSay the cert expires in 90 days and you would like\nto renew, **at latest** 10 days before it expires.\n\nYou would set this to `10 * 24 * 60 * 60 * 1000`.\n\n**MUST** be **less than** `renewWithin`.\n\n.sniCallback()\n-----------\n\nThis gets passed to `https.createServer(httpsOptions, app)` as `httpsOptions.SNICallback`.\n\n```javascript\nvar leSni = require('le-sni-auto').create({\n  renewWithin: 10 * 24 * 60 * 60 1000\n});\n\nvar httpsOptions = require('localhost.daplie.com-certificates').merge({\n  SNICallback: leSni.sniCallback\n});\n\nfunction app(req, res) {\n  res.end(\"Hello, World!\");\n}\n\nhttps.createServer(httpsOptions, app);\n```\n\n.cacheCerts()\n-----------\n\nManually load a certificate into the cache.\n\nThis is useful in a cluster environment where the master\nmay wish to inform multiple workers of a new or renewed certificate,\nor to satisfy tls-sni-01 challenges.\n\n```\nleSni.cacheCerts({\n, privkey: '<<privkey.pem>>'\n, cert: '<<cert.pem + chain.pem>>'\n, subject: 'example.com'\n, altnames: [ 'example.com', 'www.example.com' ]\n, issuedAt: 1470975565000\n, expiresAt: 1478751565000\n, auto: true\n});\n```\n\n.uncacheCerts()\n-----------\n\nRemove cached certificates from the cache.\n\nThis is useful once a tls-sni-01 challenge has been satisfied.\n\n```\nleSni.uncacheCerts({\n, subject: 'example.com'\n, altnames: [ 'example.com', 'www.example.com' ]\n});\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/le-sni-auto.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "2.1.0"
}
