{"version":3,"sources":["../src/DateUtils.js"],"names":[],"mappings":"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","file":"DateUtils.js","sourcesContent":["\n/**\n * Clone a date object.\n *\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `d` as a new date with `n` months added.\n * @param {[type]} d\n * @param {[type]} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return d < today;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  const date = clone(d);\n  const date1 = clone(d1);\n  const date2 = clone(d2);\n\n  date.setHours(0, 0, 0, 0);\n  date1.setHours(0, 0, 0, 0);\n  date2.setHours(0, 0, 0, 0);\n  return (date1 < date && date < date2) || (date2 < date && date < date1);\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range = { from: null, to: null }) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && day < from) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n    if (to < from) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to));\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  isSameDay,\n  isDayInRange,\n  isDayBetween,\n  isPastDay,\n};\n"]}